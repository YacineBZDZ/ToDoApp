import { StatusBar } from 'expo-status-bar';
import { Keyboard, KeyboardAvoidingView, TouchableOpacity, WriteTaskWrapper,Platform, StyleSheet, Text, View, TextInput, Alert, ActivityIndicator } from 'react-native';
import Task from './components/task';
import TaskService from './routes/taskService';
import React, {useState, useEffect} from 'react';


      {/*TODO:Basic Todo list (frontend)
         TODO:Basic login (backend)
         TODO:Todo list implementation in the backend (backend)
         TODO:Link Todo list Frontend to Backend
         TODO:link login to frontend
         TODO:Integration of JWT 
         TODO:Encryption of user data when registering*/}



export default function App() {
  const [task, setTask] = useState('');
  const [taskItems, setTaskItems] = useState([]);
  const [isLoading, setIsLoading] = useState(false);
  const [isLoadingTasks, setIsLoadingTasks] = useState(true);

  // Load tasks when component mounts
  useEffect(() => {
    // Log network info for debugging
    NetworkUtils.getNetworkInfo();
    
    // Test connection first, then load tasks
    testConnectionAndLoadTasks();
  }, []);

  const testConnectionAndLoadTasks = async () => {
    try {
      setIsLoadingTasks(true);
      
      // Test connection first
      console.log('Testing network connection...');
      const connectionTest = await NetworkUtils.testConnection();
      
      if (!connectionTest.success) {
        throw new Error(`Connection failed: ${connectionTest.error || connectionTest.status}`);
      }
      
      // If connection works, load tasks
      await loadTasks();
    } catch (error) {
      Alert.alert(
        'Connection Error', 
        `Failed to connect to server: ${error.message}\n\nPlease check:\n- Server is running on http://127.0.0.1:8001\n- Network connection\n- Firewall settings`
      );
      console.error('Connection test failed:', error);
      setIsLoadingTasks(false);
    }
  };

  const loadTasks = async () => {
    try {
      const tasks = await TaskService.getAllTasks();
      setTaskItems(tasks);
    } catch (error) {
      Alert.alert('Error', 'Failed to load tasks. Please try again.');
      console.error('Error loading tasks:', error);
    } finally {
      setIsLoadingTasks(false);
    }
  };

  const handleAddTask = async () => {
    if (!task.trim()) {
      Alert.alert('Error', 'Please enter a task');
      return;
    }

    try {
      setIsLoading(true);
      Keyboard.dismiss();
      
      // Create task in backend
      const newTask = await TaskService.createTask(task.trim());
      
      // Update local state
      setTaskItems([...taskItems, newTask]);
      setTask('');
      
    } catch (error) {
      Alert.alert('Error', 'Failed to add task. Please try again.');
      console.error('Error adding task:', error);
    } finally {
      setIsLoading(false);
    }
  };

  const completeTask = async (index) => {
    const taskToDelete = taskItems[index];
    
    try {
      // Delete task from backend
      await TaskService.deleteTask(taskToDelete.id);
      
      // Update local state
      let itemsCopy = [...taskItems];
      itemsCopy.splice(index, 1);
      setTaskItems(itemsCopy);
      
    } catch (error) {
      Alert.alert('Error', 'Failed to delete task. Please try again.');
      console.error('Error deleting task:', error);
    }
  };

  return (
    <View style={styles.container}>

    


      {/*Task Title Component*/}
      <View style={styles.taskListContainer}>

          <Text style={styles.sectionTitle}>Today's Tasks</Text>

          <View style={styles.items}>
            {isLoadingTasks ? (
              <View style={styles.loadingContainer}>
                <ActivityIndicator size="large" color="#55BCF6" />
                <Text style={styles.loadingText}>Loading tasks...</Text>
              </View>
            ) : (
              taskItems.map((item, index) => {
                return (
                  <TouchableOpacity key={item.id || index} onPress={() => completeTask(index)}>
                    <Task key={item.id || index} text={item.title || item.text || item} />
                  </TouchableOpacity>
                )
              })
            )}
           
           {/*This is where the tasks will go!*/}
          </View>

          <StatusBar style="auto" />
       </View>
      {/*Task Input*/}
      <KeyboardAvoidingView
      behavior={Platform.OS === "android" ? "padding" : "height"}
      style={styles.WriteTaskWrapper}
      >
       <TextInput style={styles.input} placeholder={"Write a task"} value={task} onChangeText={text => setTask(text)}></TextInput>
       <TouchableOpacity onPress={() => handleAddTask()} disabled={isLoading}>
        <View style={[styles.addWrapper, isLoading && styles.addWrapperDisabled]}>
          {isLoading ? (
            <ActivityIndicator size="small" color="#FFF" />
          ) : (
            <Text style={styles.addText}>+</Text>
          )}
        </View>
       </TouchableOpacity>
      </KeyboardAvoidingView>

    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#B1E2F0',
  },
  taskListContainer: {
    padding: 80,
    paddingHorizontal: 20, 
  },
  sectionTitle: {
    fontSize: 24,
    fontWeight: 'bold',
  },
  items: {
    marginTop: 30,
  },
  WriteTaskWrapper: {
    position: 'absolute',
    bottom: 50,
    width: '100%',
    flexDirection: 'column',
    alignItems: 'center',
    justifyContent: 'center',
  },
  input: {
    padding: 10,
    borderRadius: 60,
    backgroundColor: '#FFF',
    borderColor: '#55BCF6',
    borderWidth: 1,
    width: '80%',
    height: 60,
    marginBottom: 10,
    marginRight: 20,
  },
  addWrapper: {
    backgroundColor: '#55BCF6',
    borderRadius: 60,
    justifyContent: 'center',
    alignItems: 'center',
    width: 200,
    height: 40,
    
  },
  addText: {
    color: '#FFF',
    fontSize: 24,
  },
  addWrapperDisabled: {
    backgroundColor: '#cccccc',
  },
  loadingContainer: {
    alignItems: 'center',
    justifyContent: 'center',
    padding: 20,
  },
  loadingText: {
    marginTop: 10,
    color: '#55BCF6',
    fontSize: 16,
  },
});
